#!/bin/sh

# Generate descriptor file for CANMIO-SVO modules.
# Use this script to avoid duplication and reduce maintenance.

# Note: This does not use NV37 for testing servos. Instead using the outputOnWrite flag for end positions
# which writes the corresponding end position NV, just like is done for CANMIO. Works fine.

# Used to omit trailing comma at end of lists.
ending[0]=',' # False - not end of list, add a comma.
ending[1]=''  # True  - at end of list, omit trailing comma.

cat <<EOF
{
  "generated":"Generated by $0",
  "moduleName":"CANMIO-SVO",
  "NVsetNeedsLearnMode": true,
  "nodeVariables": [
EOF

for ch in 1 2 3 4 5 6 7 8
do
    cat <<EOF
    {
      "type": "NodeVariableGroup",
      "displayTitle": "Servo $ch",
      "groupItems": [
        {
          "displayTitle": "ON end position",
          "type": "NodeVariableSlider",
          "nodeVariableIndex": $((1+$ch*4)),
          "outputOnWrite": true
        },
        {
          "displayTitle": "OFF end position",
          "type": "NodeVariableSlider",
          "nodeVariableIndex": $((2+$ch*4)),
          "outputOnWrite": true
        },
        {
          "displayTitle": "ON speed",
          "type": "NodeVariableSlider",
          "nodeVariableIndex": $((3+$ch*4)),
          "max": 7
        },
        {
          "displayTitle": "OFF speed",
          "type": "NodeVariableSlider",
          "nodeVariableIndex": $((4+$ch*4)),
          "max": 7
        },
        {
          "displayTitle": "Cut off at end position",
          "type": "NodeVariableBitSingle",
          "nodeVariableIndex": 1,
          "bit": $(($ch-1))
        },
        {
          "displayTitle": "Wait for other servos to complete",
          "type": "NodeVariableBitSingle",
          "nodeVariableIndex": 4,
          "bit": $(($ch-1))
        },
        {
          "displayTitle": "Move at startup enable",
          "type": "NodeVariableBitSingle",
          "nodeVariableIndex": 3,
          "bit": $(($ch-1))
        },
        {
          "displayTitle": "Startup position",
          "visibilityLogic": { 
            "nvBit": {"index": 3, "bit": $(($ch-1))},
            "equals": 1
          },
          "type": "NodeVariableSelect",
          "nodeVariableIndex": 2,
          "bitMask": $((1<<($ch-1))),
          "options": [
            {"value": 0, "label": "Start at saved position"},
            {"value": $((1<<($ch-1))), "label": "Start at OFF position"}
          ]
        }
      ]
    }${ending[$(($ch == 8))]}
EOF
done

cat <<EOF
  ],
  "eventVariables": [
    {
      "displayTitle": "Event Direction",
      "type": "EventVariableSelect",
      "eventVariableIndex": 3,
      "bitMask": 128,
      "options": [
        {
          "value": 0,
          "label": "Consumed Event"
        },
        {
          "value": 128,
          "label": "Produced Event"
        }
      ]
    },
    {
      "displayTitle": "Consumed Event",
      "type": "EventVariableGroup",
      "visibilityLogic": {
        "evBit": { "index": 3, "bit": 7},
        "equals": 0
      },
      "groupItems": [
EOF

for ch in 1 2 3 4 5 6 7 8
do
  cat <<EOF
        {
          "displayTitle": "Servo $ch",
          "type": "EventVariableGroup",
          "groupItems": [
            {
              "displayTitle": "Set Servo",
              "type": "EventVariableBitSingle",
              "eventVariableIndex": 1,
              "bit": $(($ch-1))
            },
            {
              "displayTitle": "Direction",
              "visibilityLogic": { 
                "evBit": {"index": 1, "bit": $(($ch-1))},
                "equals": 1
              },
              "type": "EventVariableSelect",
              "eventVariableIndex": 2,
              "bitMask": $((1<<($ch-1))),
              "options": [
                {"value": 0, "label": "Set ON position"},
                {"value": $((1<<($ch-1))), "label": "Set OFF position"}
              ]
            }
          ]
        }${ending[$(($ch == 8))]}
EOF
done

cat <<EOF
      ]
    },
    {
      "displayTitle": "Produced Event",
      "type": "EventVariableGroup",
      "visibilityLogic": {
        "evBit": { "index": 3, "bit": 7},
        "equals": 1
      },
      "groupItems": [
        {
          "displayTitle": "Servo",
          "type": "EventVariableSelect",
          "eventVariableIndex": 3,
          "bitMask": 28,
          "options": [
            {"value": 0, "label": "Servo 1"}, 
            {"value": 4, "label": "Servo 2"}, 
            {"value": 8, "label": "Servo 3"}, 
            {"value": 12, "label": "Servo 4"}, 
            {"value": 16, "label": "Servo 5"}, 
            {"value": 20, "label": "Servo 6"}, 
            {"value": 24, "label": "Servo 7"}, 
            {"value": 28, "label": "Servo 8"}
          ]
        },
        {
          "displayTitle": "Notification",
          "type": "EventVariableSelect",
          "eventVariableIndex": 3,
          "bitMask": 3,
          "options": [
            {"value": 0, "label": "Send at ON end"},
            {"value": 1, "label": "Send at OFF end"},
            {"value": 2, "label": "Send at MID point"}
          ]
        },
        {
          "displayTitle": "Invert END event polarity",
          "type": "EventVariableBitSingle",
          "eventVariableIndex": 3,
          "bit": 6,
          "visibilityLogic": { "evBit": {"index": 3, "bit":  1}, "equals" :  0}
        },
        {
          "displayTitle": "Invert MID event polarity",
          "type": "EventVariableBitSingle",
          "eventVariableIndex": 3,
          "bit": 5,
          "visibilityLogic": { "evBit": {"index": 3, "bit":  1}, "equals" :  1}
        }
      ]
    }
  ]
}
EOF
