#!/bin/sh

# Generate descriptor file for CANMIO-Universal modules.
# Use this script to avoid duplication and reduce maintenance.

# Version 3d adds:
#  * Support for PIC18F26K80 which supports the ANALOGUE and MAGNET I/O types.
# Version 3e adds:
#  * Support for 180 degree servo movement.

TZ= datestring=`date +%Y%m%d%H%M`

# Used to omit trailing comma at end of lists.
ending[0]=',' # False - not end of list, add a comma.
ending[1]=''  # True  - at end of list, omit trailing comma.

# Default module type is CANMIO
moduleName=CANMIO
eventVariables=20
channels=16
processorSeries=K

while getopts 't:p:v:' opt; do
  case "$opt" in
    t)
      case $OPTARG in
      XIO)
        type=XIO
        moduleName=CANXIO
        channels=24
        ;;
      *)
        echo "$0: Unknown module type '$OPTARG'"
        echo "Usage: $0 [-t type] [-p processor] -v <version>"
        exit 1
        ;;
      esac
      ;;
    p)
      processor=$OPTARG
      case $OPTARG in
      21 ) # PIC18F27Q84
        processorSeries=Q
        ;;
      22 ) # PIC18F47Q84
        processorSeries=Q
        ;;
      23 ) # PIC18F27Q83
        processorSeries=Q
        ;;
      esac
      ;;
    v)
      ver=$OPTARG
      ;;
    *)
      echo "Usage: $0 [-t type] [-p processor] -v <version>"
      exit 1
      ;;
  esac
done
shift "$(($OPTIND -1))"

if [ -z "$ver" ]
then
  echo "Version not set."
  echo "Usage: $0 [-t type] [-p processor] -v <version>"
  exit 1
fi

# Capabilities per version
case $ver in
  3a|3c)
    ;;
  3d)
    hasAnalogue=1
    ;;
  3e)
    hasAnalogue=1
    hasServo180=1
    ;;
  4a)
    hasAnalogue=1
    hasServo180=1
    ;;
  *)
    echo "$0: Unknown version '$ver'"
    exit 1
    ;;
esac

# A function that can be used as an index to the $ending array.
function strneq()
{
  if [ "$1" = "$2" ]
  then
    echo 0
  else
    echo 1
  fi
}

cat <<EOF
{
  "generated":"Generated by $0 ${type:+-t $type }${processor:+-p $processor }-v $ver",
  "timestamp": "$datestring",
  "moduleName":"$moduleName",
  "nodeVariables": [
    {
      "type": "NodeVariableTabs",
      "tabPanels": [
        { "displayTitle": "Globals",
          "items": [
            {
              "type": "NodeVariableSlider",
              "nodeVariableIndex": 1,
              "displayTitle": "Produced startup event Delay",
              "displaySubTitle": "0.1 second steps, starting at 2",
              "displayUnits": "seconds",
              "displayScale": 0.1,
              "displayOffset":2
            },
            {
              "type": "NodeVariableNumber",
              "nodeVariableIndex": 2,
              "displayTitle": "Heartbeat Delay",
              "displaySubTitle": "not yet implemented",
              "displayUnits": "milliseconds"
            },
            {
              "type": "NodeVariableSlider",
              "nodeVariableIndex": 5,
              "displayTitle": "Time delay between response messages",
              "displaySubTitle": "1 millisecond steps",
              "displayUnits": "milliseconds"
            },
            {
              "type": "NodeVariableNumber",
              "nodeVariableIndex": 3,
              "displayTitle": "Multi Servo speed",
              "displaySubTitle": "If >234 moves this amount every 100ms. If <= 234 number of 20ms periods per step",
              "displayUnits": "milliseconds"
            },
EOF
    if [ "$processorSeries" = "Q" ]
    then
      cat << EOF
            {
              "type": "NodeVariableBitArray",
              "nodeVariableIndex": 6,
              "displayTitle": "Pullups for channels 1-8",
              "displaySubTitle": "",
              "bitCollection":[
                {"bitPosition": 0, "label": "Channel 1"},
                {"bitPosition": 1, "label": "Channel 2"},
                {"bitPosition": 2, "label": "Channel 3"},
                {"bitPosition": 3, "label": "Channel 4"},
                {"bitPosition": 4, "label": "Channel 5"},
                {"bitPosition": 5, "label": "Channel 6"},
                {"bitPosition": 6, "label": "Channel 7"},
                {"bitPosition": 7, "label": "Channel 8"}
              ]
            },
            {
              "type": "NodeVariableBitArray",
              "nodeVariableIndex": 7,
              "displayTitle": "Pullups for channels 9-16",
              "displaySubTitle": "",
              "bitCollection":[
                {"bitPosition": 0, "label": "Channel 9"},
                {"bitPosition": 1, "label": "Channel 10"},
                {"bitPosition": 2, "label": "Channel 11"},
                {"bitPosition": 3, "label": "Channel 12"},
                {"bitPosition": 4, "label": "Channel 13"},
                {"bitPosition": 5, "label": "Channel 14"},
                {"bitPosition": 6, "label": "Channel 15"},
                {"bitPosition": 7, "label": "Channel 16"}
              ]
            }${ending[$( strneq "$type" "XIO" ) ]}
EOF
        if [ "$type" = "XIO" ]
        then
          cat <<EOF
            {
              "type": "NodeVariableBitArray",
              "nodeVariableIndex": 8,
              "displayTitle": "Pullups for channels 17-24",
              "displaySubTitle": "",
              "bitCollection":[
                {"bitPosition": 0, "label": "Channel 17"},
                {"bitPosition": 1, "label": "Channel 18"},
                {"bitPosition": 2, "label": "Channel 19"},
                {"bitPosition": 3, "label": "Channel 20"},
                {"bitPosition": 4, "label": "Channel 21"},
                {"bitPosition": 5, "label": "Channel 22"},
                {"bitPosition": 6, "label": "Channel 23"},
                {"bitPosition": 7, "label": "Channel 24"}
              ]
            }
EOF
        fi
    else 
        # K series
        if [ "$type" = "XIO" ]
        then
          cat <<EOF
            {
              "type": "NodeVariableBitArray",
              "nodeVariableIndex": 6,
              "displayTitle": "Flags",
              "displaySubTitle": "",
              "bitCollection":[
                {"bitPosition": 0, "label": "ch17-24 pullups enabled"}
              ]
            },
EOF
        fi
        # Pull-ups for port B where bits 0, 1, 4, 5 are used.
        # See https://merg.org.uk/merg_wiki/doku.php?id=cbus:canmio_fw3#i_o_pins
        cat <<EOF
            {
              "type": "NodeVariableBitArray",
              "nodeVariableIndex": 4,
              "displayTitle": "PORTB Pullups",
              "displaySubTitle": "",
              "bitCollection":[
                {"bitPosition": 0, "label": "Channel 9"},
                {"bitPosition": 1, "label": "Channel 10"},
                {"bitPosition": 4, "label": "Channel 11"},
                {"bitPosition": 5, "label": "Channel 12"}
              ]
            }
EOF
    fi
    cat <<EOF
          ]
        },
EOF

for (( ch=1 ; $ch <= $channels ; ++ch ))
do
    ioTypes='{"label": "INPUT", "value": 0},
                {"label": "OUTPUT", "value": 1}'
    if [ $ch -le 16 ]
    then
      # CANXIO does not have timers for channels 17-24 thus cannot have servos on these pins.
      ioTypes="$ioTypes"',
                {"label": "SERVO", "value": 2},
                {"label": "BOUNCE", "value": 3},
                {"label": "MULTI", "value": 4}'
    fi
    # K Series has restrictions on which pins can use with analogue input.
    if [ -n "$hasAnalogue" -a \( "$processorSeries" = "Q" -o \( $ch -ge 9 -a $ch -le $channels -a $ch -ne 12 \) \) ]
    then
      ioTypes="$ioTypes"',
                {"label": "ANALOGUE", "value": 5},
                {"label": "MAGNET", "value": 6}'
    fi
    cat <<EOF
        { "displayTitle": "Channel $ch",
          "items": [
            {
              "type": "NodeVariableSelect",
              "nodeVariableIndex": $((9+$ch*7)),
              "displayTitle": "I/O type",
              "displaySubTitle": "",
              "options": [${ioTypes}]
            },
            {
              "type": "NodeVariableSlider",
              "comment":"input type only",
              "visibilityLogic":{ "nv":$((9+$ch*7)), "equals": 0 },
              "nodeVariableIndex": $((11+$ch*7)),
              "displayTitle": "ON delay",
              "displaySubTitle": "input specific",
              "displayUnits": "milliseconds",
              "displayScale": 5
            },
            {
              "type": "NodeVariableSlider",
              "comment":"output type only",
              "visibilityLogic":{ "nv":$((9+$ch*7)), "equals": 1 },
              "nodeVariableIndex": $((11+$ch*7)),
              "displayTitle": "Pulse duration",
              "displaySubTitle": "output specific",
              "displayUnits": "seconds",
              "displayScale": 0.1
            },
            {
              "type": "NodeVariableSlider",
              "comment":"servo type only",
              "visibilityLogic":{ "nv":$((9+$ch*7)), "equals": 2 },
              "nodeVariableIndex": $((11+$ch*7)),
              "displayTitle": "OFF position",
              "displaySubTitle": "servo specific",
              "displayUnits": "steps",
              "outputOnWrite": true
            },
            {
              "type": "NodeVariableSlider",
              "comment":"bounce type only",
              "visibilityLogic":{ "nv":$((9+$ch*7)), "equals": 3 },
              "nodeVariableIndex": $((11+$ch*7)),
              "displayTitle": "UPPER position",
              "displaySubTitle": "bounce specific",
              "displayUnits": "steps",
              "outputOnWrite": true
            },
            {
              "displayTitle": "number of positions",
              "displaySubTitle": "multi specific",
              "comment":"multi type only",
              "type": "NodeVariableSelect",
              "visibilityLogic":{ "nv":$((9+$ch*7)), "equals": 4 },
              "nodeVariableIndex": $((11+$ch*7)),
              "options": [
                {"label": "1 position", "value": 1},
                {"label": "2 positions", "value": 2},
                {"label": "3 positions", "value": 3},
                {"label": "4 positions", "value": 4}
              ]
            },
EOF
    if [ -n "$hasAnalogue" ]
    then
      cat <<EOF
            {
              "displayTitle": "magnet setup",
              "displaySubTitle": "ADC offset",
              "comment":"magnet type only",
              "type": "NodeVariableSlider",
              "visibilityLogic":{ "nv":$((9+$ch*7)), "equals": 6 },
              "nodeVariableIndex": $((11+$ch*7)),
              "displayUnits": "ADC units, in 1.22mV steps"
            },
EOF
    fi
    cat <<EOF
            {
              "type": "NodeVariableSlider",
              "comment":"input type only",
              "visibilityLogic":{ "nv":$((9+$ch*7)), "equals": 0 },
              "nodeVariableIndex": $((12+$ch*7)),
              "displayTitle": "OFF delay",
              "displaySubTitle": "input specific",
              "displayUnits": "milliseconds",
              "displayScale": 5
            },
            {
              "type": "NodeVariableSlider",
              "comment":"output type only",
              "visibilityLogic":{ "nv":$((9+$ch*7)), "equals": 1 },
              "nodeVariableIndex": $((12+$ch*7)),
              "displayTitle": "Flash period",
              "displaySubTitle": "output specific",
              "displayUnits": "seconds",
              "displayScale": 0.1
            },
            {
              "type": "NodeVariableSlider",
              "comment":"servo type only",
              "visibilityLogic":{ "nv":$((9+$ch*7)), "equals": 2 },
              "nodeVariableIndex": $((12+$ch*7)),
              "displayTitle": "ON position",
              "displaySubTitle": "servo specific",
              "displayUnits": "steps",
              "outputOnWrite": true
            },
            {
              "type": "NodeVariableSlider",
              "comment":"bounce type only",
              "visibilityLogic":{ "nv":$((9+$ch*7)), "equals": 3 },
              "nodeVariableIndex": $((12+$ch*7)),
              "displayTitle": "LOWER position",
              "displaySubTitle": "bounce specific",
              "displayUnits": "steps",
              "outputOnWrite": true
            },
            {
              "type": "NodeVariableSlider",
              "comment":"multi type only",
              "visibilityLogic":{ "nv":$((9+$ch*7)), "equals": 4 },
              "nodeVariableIndex": $((12+$ch*7)),
              "displayTitle": "pos 1",
              "displaySubTitle": "multi specific",
              "displayUnits": "steps",
              "outputOnWrite": true
            },
EOF
    if [ -n "$hasAnalogue" ]
    then
      cat <<EOF
            {
              "displayTitle": "Threshold",
              "displaySubTitle": "analog specific",
              "comment":"analog type only",
              "type": "NodeVariableSlider",
              "visibilityLogic":{ "nv":$((9+$ch*7)), "equals": 5 },
              "nodeVariableIndex": $((12+$ch*7)),
              "displayUnits": "Volts",
              "displayScale": 0.0196
            },
            {
              "displayTitle": "Threshold",
              "displaySubTitle": "magnet specific",
              "comment":"analog type only",
              "type": "NodeVariableSlider",
              "visibilityLogic":{ "nv":$((9+$ch*7)), "equals": 6 },
              "nodeVariableIndex": $((12+$ch*7)),
              "displayUnits": "ADC units, in 1.22mV steps"
            },
EOF
    fi
    cat <<EOF
            {
              "type": "NodeVariableSlider",
              "comment":"servo type only",
              "visibilityLogic":{ "nv":$((9+$ch*7)), "equals": 2 },
              "nodeVariableIndex": $((13+$ch*7)),
              "displayTitle": "OFF to ON speed",
              "displaySubTitle": "servo specific",
              "displayUnits": ""
            },
            {
              "type": "NodeVariableSlider",
              "comment":"bounce type only",
              "visibilityLogic":{ "nv":$((9+$ch*7)), "equals": 3 },
              "nodeVariableIndex": $((13+$ch*7)),
              "displayTitle": "Bounce coefficient",
              "displaySubTitle": "bounce specific",
              "displayUnits": " %"
            },
            {
              "type": "NodeVariableSlider",
              "comment":"multi type only",
              "visibilityLogic":{ "nv":$((9+$ch*7)), "equals": 4 },
              "nodeVariableIndex": $((13+$ch*7)),
              "displayTitle": "pos 2",
              "displaySubTitle": "multi specific",
              "displayUnits": "steps",
              "outputOnWrite": true
            },
EOF
    if [ -n "$hasAnalogue" ]
    then
      cat <<EOF
            {
              "displayTitle": "Hysteresis",
              "displaySubTitle": "analogue specific",
              "comment":"analogue type only",
              "type": "NodeVariableSlider",
              "visibilityLogic":{ "nv":$((9+$ch*7)), "equals": 5 },
              "nodeVariableIndex": $((13+$ch*7)),
              "displayUnits": "Volts",
              "displayScale": 0.0196
            },
            {
              "displayTitle": "Hysteresis",
              "displaySubTitle": "magnet specific",
              "comment":"magnet type only",
              "type": "NodeVariableSlider",
              "visibilityLogic":{ "nv":$((9+$ch*7)), "equals": 6 },
              "nodeVariableIndex": $((13+$ch*7)),
              "displayUnits": "ADC units, in 1.22mV steps"
            },
EOF
    fi
    cat <<EOF
            {
              "type": "NodeVariableSlider",
              "comment":"servo type only",
              "visibilityLogic":{ "nv":$((9+$ch*7)), "equals": 2 },
              "nodeVariableIndex": $((14+$ch*7)),
              "displayTitle": "ON to OFF speed",
              "displaySubTitle": "servo specific",
              "displayUnits": ""
            },
            {
              "type": "NodeVariableSlider",
              "comment":"bounce type only",
              "visibilityLogic":{ "nv":$((9+$ch*7)), "equals": 3 },
              "nodeVariableIndex": $((14+$ch*7)),
              "displayTitle": "Pull speed",
              "displaySubTitle": "bounce specific",
              "displayUnits": "milliseconds",
              "displayScale": 20
            },
            {
              "type": "NodeVariableSlider",
              "comment":"multi type only",
              "visibilityLogic":{ "nv":$((9+$ch*7)), "equals": 4 },
              "nodeVariableIndex": $((14+$ch*7)),
              "displayTitle": "pos 3",
              "displaySubTitle": "multi specific",
              "displayUnits": "steps",
              "outputOnWrite": true
            },
EOF
    if [ -n "$hasAnalogue" ]
    then
      cat <<EOF
            {
              "displayTitle": "Offset H",
              "displaySubTitle": "magnet specific",
              "comment":"magnet type only",
              "type": "NodeVariableSlider",
              "visibilityLogic":{ "nv":$((9+$ch*7)), "equals": 6 },
              "nodeVariableIndex": $((14+$ch*7)),
              "displayUnits": "ADC units, in 1.22mV steps"
            },
EOF
    fi
    cat <<EOF
            {
              "type": "NodeVariableSlider",
              "comment":"bounce type only",
              "visibilityLogic":{ "nv":$((9+$ch*7)), "equals": 3 },
              "nodeVariableIndex": $((15+$ch*7)),
              "displayTitle": "Pull pause",
              "displaySubTitle": "bounce specific",
              "displayUnits": "milliseconds",
              "displayScale": 20
            },
            {
              "type": "NodeVariableSlider",
              "comment":"multi type only",
              "visibilityLogic":{ "nv":$((9+$ch*7)), "equals": 4 },
              "nodeVariableIndex": $((15+$ch*7)),
              "displayTitle": "pos 4",
              "displaySubTitle": "multi specific",
              "displayUnits": "steps",
              "outputOnWrite": true
            },
EOF
    if [ -n "$hasAnalogue" ]
    then
      cat <<EOF
            {
              "displayTitle": "Offset L",
              "displaySubTitle": "magnet specific",
              "comment":"magnet type only",
              "type": "NodeVariableSlider",
              "visibilityLogic":{ "nv":$((9+$ch*7)), "equals": 6 },
              "nodeVariableIndex": $((15+$ch*7)),
              "displayUnits": "ADC units, in 1.22mV steps"
            },
EOF
    fi
    cat <<EOF
            {
              "type": "NodeVariableBitArray",
              "nodeVariableIndex": $((10+$ch*7)),
              "displayTitle": "Flags",
              "bitCollection":[
                {"bitPosition": 0, "overload":{"nv": $((9+$ch*7)), "labels": [
                      {"value": 0, "label": "TRIGGER_INVERTED"},
                      {"value": 1, "label": "TRIGGER_INVERTED"},
                      {"value": 2, "label": "TRIGGER_INVERTED"},
                      {"value": 3, "label": "TRIGGER_INVERTED"},
                      {"value": 4, "label": "TRIGGER_INVERTED"}
                    ]
                  }
                },
                {"bitPosition": 1, "overload":{"nv": $((9+$ch*7)), "labels": [
                      {"value": 2, "label": "CUTOFF"},
                      {"value": 3, "label": "CUTOFF"},
                      {"value": 4, "label": "CUTOFF"}
                    ]
                  }
                },
                {"bitPosition": 2, "overload":{"nv": $((9+$ch*7)), "labels": [
                      {"value": 1, "label": "STARTUP"},
                      {"value": 2, "label": "STARTUP"},
                      {"value": 3, "label": "STARTUP"},
                      {"value": 4, "label": "STARTUP"}
                    ]
                  }
                },
                {"bitPosition": 3, "overload":{"nv": $((9+$ch*7)), "labels": [
                      {"value": 0, "label": "DISABLE_OFF"},
                      {"value": 1, "label": "DISABLE_OFF"}${ending[$(($hasAnalogue + 0 != 1))]}
EOF
    if [ -n "$hasAnalogue" ]
    then
        cat <<EOF
                      {"value": 5, "label": "DISABLE_OFF"},
                      {"value": 6, "label": "DISABLE_OFF"}
EOF
    fi
    cat <<EOF
                    ]
                  }
                },
                {"bitPosition": 4, "overload":{"nv": $((9+$ch*7)), "labels": [
                      {"value": 0, "label": "TOGGLE"},
                      {"value": 2, "label": "PULLUP"},
                      {"value": 3, "label": "PULLUP"},
                      {"value": 4, "label": "PULLUP"}
                    ]
                  }
                },
                {"bitPosition": 5, "overload":{"nv": $((9+$ch*7)), "labels": [
                      {"value": 0, "label": "INPUT_DISABLE_SOD_RESPONSE"},
                      {"value": 1, "label": "ACTION_INVERTED"},
                      {"value": 2, "label": "ACTION_INVERTED"},
                      {"value": 3, "label": "ACTION_INVERTED"},
                      {"value": 4, "label": "ACTION_INVERTED"}${ending[$(($hasAnalogue + 0 != 1))]}
EOF
    if [ -n "$hasAnalogue" ]
    then
        cat <<EOF
                      {"value": 5, "label": "INPUT_DISABLE_SOD_RESPONSE"},
                      {"value": 6, "label": "INPUT_DISABLE_SOD_RESPONSE"}
EOF
    fi
    cat <<EOF
                    ]
                  }
                },
                {"bitPosition": 6, "label": "EVENT_INVERTED"},
                {"bitPosition": 7, "overload":{"nv": $((9+$ch*7)), "labels": [
                      {"value": 1, "label": "ACTION_EXPEDITED"}${ending[$(($hasServo180 + 0 != 1))]}
EOF
    if [ -n "$hasServo180" ]
    then
        cat <<EOF
                      {"value": 2, "label": "EXTENDED 180 DEGREE RANGE"},
                      {"value": 3, "label": "EXTENDED 180 DEGREE RANGE"},
                      {"value": 4, "label": "EXTENDED 180 DEGREE RANGE"}
EOF
    fi
    cat <<EOF
                    ]
                  }
                }
              ]
            }
          ],
          "comment":"end of channel $ch"
        }${ending[$(($ch == $channels))]}
EOF
done

cat <<EOF
      ]
    }
  ],
  "eventVariables": [
    {
      "type": "EventVariableSelect",
      "eventVariableIndex": 1,
      "displayTitle": "Produced event",
      "displaySubTitle": "EV1",
      "options": [
        {"value": 0, "label": "no event (0)"},
        {"value": 1, "label": "Startup event (1)"},
EOF

for (( ch=1 ; $ch <= $channels ; ++ch ))
do
    cat <<EOF
        {"value": $((4+$ch*4)), "overload":{"nv": $((9+$ch*7)), "labels": [
              {"value": 0, "label": "CH$ch - Input Changed"},
              {"value": 1, "label": "CH$ch - Output Changed"},
              {"value": 2, "label": "CH$ch - Reached OFF"},
              {"value": 3, "label": "CH$ch - Output Changed"},
              {"value": 4, "label": "CH$ch - AT1"}${ending[$(($hasAnalogue + 0 != 1))]}
EOF

    if [ -n "$hasAnalogue" ]
    then
        cat <<EOF
              {"value": 5, "label": "CH$ch - Threshold"},
              {"value": 6, "label": "CH$ch - Lower Threshold"}
EOF
    fi
    cat <<EOF
            ]
          }
        },
        {"value": $((5+$ch*4)), "overload":{"nv": $((9+$ch*7)), "labels": [
              {"value": 0, "label": "CH$ch - TWO_ON"},
              {"value": 2, "label": "CH$ch - Reached MID"},
              {"value": 4, "label": "CH$ch - AT2"}${ending[$(($hasAnalogue + 0 != 1))]}
EOF
    if [ -n "$hasAnalogue" ]
    then
        cat <<EOF
              {"value": 6, "label": "CH$ch - Upper Threshold"}
EOF
    fi
    cat <<EOF
            ]
          }
        },
        {"value": $((6+$ch*4)), "overload":{"nv": $((9+$ch*7)), "labels": [
              {"value": 2, "label": "CH$ch - Reached ON"},
              {"value": 4, "label": "CH$ch - AT3"}
            ]
          }
        },
        {"value": $((7+$ch*4)), "overload":{"nv": $((9+$ch*7)), "labels": [
              {"value": 4, "label": "CH$ch - AT4"}
            ]
          }
        }${ending[$(($ch == $channels))]}
EOF
done

cat <<EOF
      ],
      "comment":"end of EV1"
    },
EOF

for (( ev=2 ; $ev <= $eventVariables ; ++ev ))
do
    cat <<EOF
    {
      "displayTitle": "Consumed Event - EV$ev",
      "type": "EventVariableGroup",
      "groupItems": [
        {
          "type": "EventVariableSelect",
          "bitMask": 127,
          "eventVariableIndex": $ev,
          "displayTitle": "Action",
          "options": [
            {"value": 0, "label": "no action"},
            {"value": 1, "label": "Consumed SOD"},
            {"value": 2, "label": "Wait 0.5s"},
            {"value": 3, "label": "Wait 1s"},
            {"value": 4, "label": "Wait 2s"},
            {"value": 5, "label": "Wait 5s"},
            {"value": 7, "label": "Stop Processing"},
EOF

for (( ch=1 ; $ch <= $channels ; ++ch ))
do
    cat <<EOF
            {"value": $((3+$ch*5)), "overload":{"nv": $((9+$ch*7)), "labels": [
                  {"value": 1, "label": "CH$ch - Change"},
                  {"value": 2, "label": "CH$ch - Change"},
                  {"value": 3, "label": "CH$ch - Change"},
                  {"value": 4, "label": "CH$ch - AT1"}
                ]
              }
            },
            {"value": $((4+$ch*5)), "overload":{"nv": $((9+$ch*7)), "labels": [
                  {"value": 1, "label": "CH$ch - ON"},
                  {"value": 2, "label": "CH$ch - ON"},
                  {"value": 3, "label": "CH$ch - ON"},
                  {"value": 4, "label": "CH$ch - AT2"}
                ]
              }
            },
            {"value": $((5+$ch*5)), "overload":{"nv": $((9+$ch*7)), "labels": [
                  {"value": 1, "label": "CH$ch - OFF"},
                  {"value": 2, "label": "CH$ch - OFF"},
                  {"value": 3, "label": "CH$ch - OFF"},
                  {"value": 4, "label": "CH$ch - AT3"}
                ]
              }
            },
            {"value": $((6+$ch*5)), "overload":{"nv": $((9+$ch*7)), "labels": [
                  {"value": 1, "label": "CH$ch - FLASH"},
                  {"value": 4, "label": "CH$ch - AT4"}
                ]
              }
            },
            {"value": $((7+$ch*5)), "overload":{"nv": $((9+$ch*7)), "labels": [
                  {"value": 1, "label": "CH$ch - !Change"},
                  {"value": 2, "label": "CH$ch - !Change"},
                  {"value": 3, "label": "CH$ch - !Change"}
                ]
              }
            }${ending[$(($ch == $channels))]}
EOF
done

cat <<EOF
          ],
          "comment":"end of EV$ev"
        },
        {
          "displayTitle": "Simultaneous",
          "type": "EventVariableBitSingle",
          "eventVariableIndex": $ev,
          "bit": 7
        }
      ]
    }${ending[$(($ev == $eventVariables))]}
EOF
done # ev

cat <<EOF
  ]
}
EOF
